# Dockerfile for Docent Backend API + PostgreSQL + Redis + Worker
# This runs the backend services without the frontend

FROM python:3.12-slim

ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONUNBUFFERED=1

WORKDIR /app

# Install system dependencies including locales
RUN apt-get update && apt-get install -y \
    curl \
    gnupg \
    lsb-release \
    ca-certificates \
    supervisor \
    locales \
    && rm -rf /var/lib/apt/lists/*

# Generate en_US.UTF-8 locale
RUN sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen && locale-gen
ENV LANG=en_US.UTF-8
ENV LANGUAGE=en_US:en
ENV LC_ALL=en_US.UTF-8

# Add PostgreSQL repository and install PostgreSQL with pgvector
RUN curl -fsSL https://www.postgresql.org/media/keys/ACCC4CF8.asc | gpg --dearmor -o /usr/share/keyrings/postgresql-keyring.gpg \
    && echo "deb [signed-by=/usr/share/keyrings/postgresql-keyring.gpg] http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list \
    && apt-get update \
    && apt-get install -y \
        postgresql-15 \
        postgresql-contrib-15 \
        postgresql-15-pgvector \
    && rm -rf /var/lib/apt/lists/*

# Install Redis
RUN apt-get update && apt-get install -y redis-server && rm -rf /var/lib/apt/lists/*

# Install uv for Python package management
RUN pip install --no-cache-dir uv

# Copy Python project files
COPY docent docent
COPY pyproject.toml .
COPY uv.lock .
RUN uv export --format requirements-txt > requirements.txt
RUN uv pip install --system -r requirements.txt

# Copy application code
COPY docent_core docent_core
RUN uv pip install --system -e .

# Copy database migrations and create empty .env
COPY alembic alembic
COPY alembic.ini alembic.ini
RUN touch .env

# Create necessary directories
RUN mkdir -p /app/scripts /var/log/supervisor /var/run/postgresql /var/lib/postgresql/data /app/cache/llm

# Create startup script for backend services
COPY <<'EOF' /app/scripts/start-backend.sh
#!/bin/bash
set -e

echo "Starting Docent Backend Services..."

# Use a subdirectory for PostgreSQL data
PGDATA="/var/lib/postgresql/data/pgdata"

# Ensure proper ownership
echo "Setting up PostgreSQL directory permissions..."
chown -R postgres:postgres /var/lib/postgresql/data

# Initialize PostgreSQL if needed
if [ ! -f "$PGDATA/PG_VERSION" ]; then
    echo "Initializing PostgreSQL database..."
    mkdir -p "$PGDATA"
    chown -R postgres:postgres "$PGDATA"
    chmod 700 "$PGDATA"
    su - postgres -c "/usr/lib/postgresql/15/bin/initdb -D $PGDATA --encoding=UTF8 --locale=en_US.UTF-8"
    
    # Configure PostgreSQL
    echo "host all all 127.0.0.1/32 md5" >> "$PGDATA/pg_hba.conf"
    echo "host all all ::1/128 md5" >> "$PGDATA/pg_hba.conf"
    echo "local all all md5" >> "$PGDATA/pg_hba.conf"
else
    echo "PostgreSQL data directory already exists, ensuring permissions..."
    chown -R postgres:postgres "$PGDATA"
    chmod 700 "$PGDATA"
fi

# Start PostgreSQL
echo "Starting PostgreSQL..."
mkdir -p /var/lib/postgresql/logs
chown postgres:postgres /var/lib/postgresql/logs
su - postgres -c "/usr/lib/postgresql/15/bin/pg_ctl -D $PGDATA -l /var/lib/postgresql/logs/postgresql.log start"

# Wait for PostgreSQL
echo "Waiting for PostgreSQL to be ready..."
for i in {1..30}; do
    if su - postgres -c "psql -U postgres -c 'SELECT 1' > /dev/null 2>&1"; then
        echo "PostgreSQL is ready!"
        break
    fi
    echo "Waiting for PostgreSQL... ($i/30)"
    sleep 2
done

# Create database and user
echo "Setting up database..."
su - postgres -c "psql -U postgres -tc \"SELECT 1 FROM pg_user WHERE usename = '${DOCENT_PG_USER}'\" | grep -q 1 || psql -U postgres -c \"CREATE USER ${DOCENT_PG_USER} WITH PASSWORD '${DOCENT_PG_PASSWORD}';\""
su - postgres -c "psql -U postgres -tc \"SELECT 1 FROM pg_database WHERE datname = '${DOCENT_PG_DATABASE}'\" | grep -q 1 || psql -U postgres -c \"CREATE DATABASE ${DOCENT_PG_DATABASE} OWNER ${DOCENT_PG_USER};\""
su - postgres -c "psql -U postgres -d ${DOCENT_PG_DATABASE} -c \"CREATE EXTENSION IF NOT EXISTS vector;\""

# Start Redis
echo "Starting Redis..."
redis-server --daemonize yes --bind 127.0.0.1 --port 6379

# Wait for Redis
echo "Waiting for Redis to be ready..."
for i in {1..10}; do
    if redis-cli ping > /dev/null 2>&1; then
        echo "Redis is ready!"
        break
    fi
    echo "Waiting for Redis... ($i/10)"
    sleep 1
done

# Run database migrations
echo "Running database migrations..."
cd /app
alembic upgrade head

# Start Backend API server
echo "Starting Backend API server..."
docent_core server --host 0.0.0.0 --port 8888 --workers 4 &
BACKEND_PID=$!

# Start Worker
echo "Starting Background Worker..."
docent_core worker --workers 2 &
WORKER_PID=$!

echo "All backend services started successfully!"

# Wait for any process to exit
wait -n

# Exit with status of process that exited first
exit $?
EOF

COPY <<'EOF' /app/scripts/pre-deploy.sh
#!/bin/bash
set -e
echo "Pre-deployment tasks completed"
EOF

RUN chmod +x /app/scripts/*.sh

# Expose API port
EXPOSE 8888

# Start all services
CMD ["/app/scripts/start-backend.sh"]
