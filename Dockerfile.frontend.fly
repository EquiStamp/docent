# Dockerfile for Fly.io Frontend deployment
# This Dockerfile builds and runs only the Next.js frontend

FROM node:22-alpine AS frontend-deps
RUN apk add --no-cache libc6-compat
WORKDIR /app
COPY docent_core/_web/package*.json ./
RUN npm ci --legacy-peer-deps

FROM node:22-alpine AS frontend-builder
WORKDIR /app
COPY --from=frontend-deps /app/node_modules ./node_modules
COPY docent_core/_web ./
# Build with backend URL - will be set by fly.toml env vars
ARG NEXT_PUBLIC_API_HOST
ARG NEXT_PUBLIC_INTERNAL_API_HOST
ENV NEXT_PUBLIC_API_HOST=${NEXT_PUBLIC_API_HOST}
ENV NEXT_PUBLIC_INTERNAL_API_HOST=${NEXT_PUBLIC_INTERNAL_API_HOST}
RUN npm run build

# Runtime image
FROM node:22-alpine

ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1

WORKDIR /app

# Copy built frontend from builder stage
COPY --from=frontend-builder /app/public /app/public
COPY --from=frontend-builder /app/.next/standalone /app/
COPY --from=frontend-builder /app/.next/static /app/.next/static

# Create startup script
RUN mkdir -p /app/scripts

COPY <<'EOF' /app/scripts/start-frontend.sh
#!/bin/sh
set -e

echo "Starting Docent frontend..."
cd /app
PORT=3000 HOSTNAME=0.0.0.0 node server.js
EOF

RUN chmod +x /app/scripts/*.sh

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:3000/ || exit 1

# Default command
CMD ["/app/scripts/start-frontend.sh"]

